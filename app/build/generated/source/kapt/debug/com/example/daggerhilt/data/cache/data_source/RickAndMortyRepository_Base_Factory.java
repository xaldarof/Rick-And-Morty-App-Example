// Generated by Dagger (https://dagger.dev).
package com.example.daggerhilt.data.cache.data_source;

import com.example.daggerhilt.data.cache.core.AppDataBase;
import com.example.daggerhilt.data.cloud.data_source.RickAndMortyApiService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RickAndMortyRepository_Base_Factory implements Factory<RickAndMortyRepository.Base> {
  private final Provider<AppDataBase> appDataBaseProvider;

  private final Provider<RickAndMortyApiService> serviceProvider;

  public RickAndMortyRepository_Base_Factory(Provider<AppDataBase> appDataBaseProvider,
      Provider<RickAndMortyApiService> serviceProvider) {
    this.appDataBaseProvider = appDataBaseProvider;
    this.serviceProvider = serviceProvider;
  }

  @Override
  public RickAndMortyRepository.Base get() {
    return newInstance(appDataBaseProvider.get(), serviceProvider.get());
  }

  public static RickAndMortyRepository_Base_Factory create(
      Provider<AppDataBase> appDataBaseProvider, Provider<RickAndMortyApiService> serviceProvider) {
    return new RickAndMortyRepository_Base_Factory(appDataBaseProvider, serviceProvider);
  }

  public static RickAndMortyRepository.Base newInstance(AppDataBase appDataBase,
      RickAndMortyApiService service) {
    return new RickAndMortyRepository.Base(appDataBase, service);
  }
}
