// Generated by Dagger (https://dagger.dev).
package com.example.daggerhilt.data.cache.data_source;

import com.example.daggerhilt.data.cache.core.AppDataBase;
import com.example.daggerhilt.data.cloud.data_source.RickAndMortyApiService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RickAndMortyRemoteMediator_Factory implements Factory<RickAndMortyRemoteMediator> {
  private final Provider<AppDataBase> appDataBaseProvider;

  private final Provider<RickAndMortyApiService> rickAndMortyApiServiceProvider;

  public RickAndMortyRemoteMediator_Factory(Provider<AppDataBase> appDataBaseProvider,
      Provider<RickAndMortyApiService> rickAndMortyApiServiceProvider) {
    this.appDataBaseProvider = appDataBaseProvider;
    this.rickAndMortyApiServiceProvider = rickAndMortyApiServiceProvider;
  }

  @Override
  public RickAndMortyRemoteMediator get() {
    return newInstance(appDataBaseProvider.get(), rickAndMortyApiServiceProvider.get());
  }

  public static RickAndMortyRemoteMediator_Factory create(Provider<AppDataBase> appDataBaseProvider,
      Provider<RickAndMortyApiService> rickAndMortyApiServiceProvider) {
    return new RickAndMortyRemoteMediator_Factory(appDataBaseProvider, rickAndMortyApiServiceProvider);
  }

  public static RickAndMortyRemoteMediator newInstance(AppDataBase appDataBase,
      RickAndMortyApiService rickAndMortyApiService) {
    return new RickAndMortyRemoteMediator(appDataBase, rickAndMortyApiService);
  }
}
