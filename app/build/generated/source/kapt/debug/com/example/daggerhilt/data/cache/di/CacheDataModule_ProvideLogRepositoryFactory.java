// Generated by Dagger (https://dagger.dev).
package com.example.daggerhilt.data.cache.di;

import com.example.daggerhilt.data.cache.data_source.RickAndMortyRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CacheDataModule_ProvideLogRepositoryFactory implements Factory<RickAndMortyRepository> {
  private final Provider<RickAndMortyRepository.Base> rickAndMortyRepositoryProvider;

  public CacheDataModule_ProvideLogRepositoryFactory(
      Provider<RickAndMortyRepository.Base> rickAndMortyRepositoryProvider) {
    this.rickAndMortyRepositoryProvider = rickAndMortyRepositoryProvider;
  }

  @Override
  public RickAndMortyRepository get() {
    return provideLogRepository(rickAndMortyRepositoryProvider.get());
  }

  public static CacheDataModule_ProvideLogRepositoryFactory create(
      Provider<RickAndMortyRepository.Base> rickAndMortyRepositoryProvider) {
    return new CacheDataModule_ProvideLogRepositoryFactory(rickAndMortyRepositoryProvider);
  }

  public static RickAndMortyRepository provideLogRepository(
      RickAndMortyRepository.Base rickAndMortyRepository) {
    return Preconditions.checkNotNullFromProvides(CacheDataModule.INSTANCE.provideLogRepository(rickAndMortyRepository));
  }
}
