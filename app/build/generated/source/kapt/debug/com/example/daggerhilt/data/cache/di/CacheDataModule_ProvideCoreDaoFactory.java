// Generated by Dagger (https://dagger.dev).
package com.example.daggerhilt.data.cache.di;

import com.example.daggerhilt.data.cache.core.AppDataBase;
import com.example.daggerhilt.data.cache.dao.RickAndMortyDao;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CacheDataModule_ProvideCoreDaoFactory implements Factory<RickAndMortyDao> {
  private final Provider<AppDataBase> appDataBaseProvider;

  public CacheDataModule_ProvideCoreDaoFactory(Provider<AppDataBase> appDataBaseProvider) {
    this.appDataBaseProvider = appDataBaseProvider;
  }

  @Override
  public RickAndMortyDao get() {
    return provideCoreDao(appDataBaseProvider.get());
  }

  public static CacheDataModule_ProvideCoreDaoFactory create(
      Provider<AppDataBase> appDataBaseProvider) {
    return new CacheDataModule_ProvideCoreDaoFactory(appDataBaseProvider);
  }

  public static RickAndMortyDao provideCoreDao(AppDataBase appDataBase) {
    return Preconditions.checkNotNullFromProvides(CacheDataModule.INSTANCE.provideCoreDao(appDataBase));
  }
}
